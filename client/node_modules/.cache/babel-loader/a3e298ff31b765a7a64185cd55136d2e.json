{"ast":null,"code":"var https = require('https');\n\nvar _ = require('lodash');\n\nvar querystring = require('querystring'); // https://developers.google.com/books/docs/v1/using#st_params\n\n\nvar defaultOptions = {\n  // Google API key\n  key: null,\n  // Search in a specified field\n  field: null,\n  // The position in the collection at which to start the list of results (startIndex)\n  offset: 0,\n  // The maximum number of elements to return with this request (Max 40) (maxResults)\n  limit: 10,\n  // Restrict results to books or magazines (or both) (printType)\n  type: 'all',\n  // Order results by relevance or newest (orderBy)\n  order: 'relevance',\n  // Restrict results to a specified language (two-letter ISO-639-1 code) (langRestrict)\n  lang: 'en'\n}; // Special Keywords\n\nvar fields = {\n  title: 'intitle:',\n  author: 'inauthor:',\n  publisher: 'inpublisher:',\n  subject: 'subject:',\n  isbn: 'isbn:'\n}; // Base url for Google Books API\n\nvar API_BASE_URL = 'https://www.googleapis.com/books/v1';\n/**\n * Search Google Books\n *\n * https://developers.google.com/books/docs/v1/reference/volumes/list\n *\n * @param  {String}   query\n * @param  {object}   options\n * @param  {Function} callback\n */\n\nvar search = function search(query, options, callback) {\n  // Make the options object optional\n  if (!_.isFunction(callback)) {\n    callback = options;\n    options = {};\n  }\n\n  var options = _.extend({}, defaultOptions, options); // Validate options\n\n\n  if (!query) {\n    return callback(new Error('Query is required'));\n  }\n\n  if (options.offset < 0) {\n    return callback(new Error('Offset cannot be below 0'));\n  }\n\n  if (options.limit < 1 || options.limit > 40) {\n    return callback(new Error('Limit must be between 1 and 40'));\n  } // Set any special keywords\n\n\n  if (options.field) {\n    query = fields[options.field] + query;\n  } // Create the request uri\n\n\n  var query = {\n    q: query,\n    startIndex: options.offset,\n    maxResults: options.limit,\n    printType: options.type,\n    orderBy: options.order,\n    langRestrict: options.lang\n  };\n\n  if (options.key) {\n    query.key = options.key;\n  }\n\n  sendRequest('/volumes', query, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!_.isArray(response.items)) {\n      return callback(null, []);\n    }\n\n    var results = _.chain(response.items).map(parseBook).compact().value();\n\n    callback(null, results, response);\n  });\n};\n/**\n * Retrieves a Volume resource based on ID.\n *\n * https://developers.google.com/books/docs/v1/reference/volumes/get\n *\n * @param  {String}   volumeId\n * @param  {Function} callback\n */\n\n\nvar lookup = function lookup(volumeId, options, callback) {\n  var query = {}; // Make the options object optional\n\n  if (!_.isFunction(callback)) {\n    callback = options;\n    options = {};\n  }\n\n  if (!volumeId) {\n    return callback(new Error('Volume ID is required'));\n  }\n\n  if (options.key) {\n    query.key = options.key;\n  }\n\n  sendRequest('/volumes/' + volumeId, query, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!response.id || response.id !== volumeId) {\n      return callback(null, null);\n    }\n\n    callback(null, parseBook(response), response);\n  });\n};\n/**\n * Send a Google Books API request\n *\n * @return {void}\n */\n\n\nvar sendRequest = function sendRequest(path, params, callback) {\n  var url = API_BASE_URL;\n\n  if (path) {\n    url += path;\n  }\n\n  if (params) {\n    url += '?' + querystring.stringify(params);\n  }\n\n  https.get(url, function (response) {\n    if (response.statusCode !== 200) {\n      return callback(new Error('Google Books API error. Status Code: ' + response.statusCode));\n    }\n\n    var body = '';\n    response.on('data', function (data) {\n      body += data;\n    });\n    response.on('end', function () {\n      var err, data;\n\n      try {\n        data = JSON.parse(body);\n      } catch (e) {\n        err = new Error('Invalid response from Google Books API.');\n      }\n\n      if (data.error) {\n        callback(new Error(data.error.message));\n      } else {\n        callback(err, data);\n      }\n    });\n  }).on('error', function (error) {\n    callback(error);\n  });\n};\n/**\n * Parse a single book result\n *\n * @param  {Object}  data\n * @return {Object}\n */\n\n\nvar parseBook = function parseBook(data) {\n  var book = _.pick(data.volumeInfo, ['title', 'subtitle', 'authors', 'publisher', 'publishedDate', 'description', 'industryIdentifiers', 'pageCount', 'printType', 'categories', 'averageRating', 'ratingsCount', 'maturityRating', 'language']);\n\n  _.extend(book, {\n    id: data.id,\n    link: data.volumeInfo.canonicalVolumeLink,\n    thumbnail: _.get(data, 'volumeInfo.imageLinks.thumbnail'),\n    images: _.pick(data.volumeInfo.imageLinks, ['small', 'medium', 'large', 'extraLarge'])\n  });\n\n  return book;\n};\n\nmodule.exports.search = search;\nmodule.exports.lookup = lookup;","map":null,"metadata":{},"sourceType":"script"}